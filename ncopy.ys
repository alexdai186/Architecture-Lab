#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Alex Dai
# 
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len ###r10 = r8###r11 = r9###
ncopy:

# How I modified the base code and why I did it:
# - I used our Iaddq instruction to improve instruction efficiency
# - I added 6 loop unrollers to improve cycle speed.
# 		I could have implemented 8, but decided not to. This allows
# 		Us to perform 6 operations per loop, reducing overhead and increasing
# 		speed.
# - Added 5 blocks that handled extra values
##################################################################
	iaddq  $-6, %rdx        	# Loop unroll length set to 6	
	jl     auxiliary            # Jump if there are extras

loop:	
	mrmovq (%rdi),%r8			# Store src in %r8
	mrmovq 8(%rdi),%r9    		# Store src+1 in %r9
	rmmovq %r8,(%rsi)			# Move src[i] to dest
	andq   %r8,%r8				# checks if src[i] <= 0
	jle    npos1				# if so, jump to npos1
	iaddq  $1,%rax				# count++

npos1:	
	rmmovq %r9,8(%rsi)     		# Move src[i+1] to dst[i+1]
	andq   %r9,%r9         		# checks if src[i+1] <= 0
	jle    npos2				# if so, jump to npos2
	iaddq  $1,%rax         		# count++

npos2: 
	mrmovq 16(%rdi),%r8   		# Move src[i+2] to %r8
	rmmovq %r8,16(%rsi)   		# Move src[i+2] to dst[i+2]
	mrmovq 24(%rdi), %r9   		# src[i+3] to %r9
	andq   %r8,%r8      	 	# checks if src[i+2] <= 0
	jle    npos3            	# if so, jump to npos3
	iaddq  $1,%rax         		# count++

npos3: 
	rmmovq %r9,24(%rsi)   		# Move src[i+3] to dst
	andq   %r9,%r9       		# checks if src[i+3] <= 0
	jle    npos4            	# if so, jump to npos4
	iaddq  $1, %rax         	# count++ 
	
npos4: 
	mrmovq 32(%rdi),%r8   		# Move src[i+4] to %r8
	rmmovq %r8,32(%rsi)   		# Move src[i+4] to dst[i+4]
	mrmovq 40(%rdi),%r9     	# Move src[i+5] to %r9
	andq   %r8,%r8       		# checks if src[i+4] <= 0
	jle    npos5            	# if so, jump to npos5
	iaddq  $1, %rax         	# count++

npos5: 
	rmmovq %r9,40(%rsi)    		# src[i+5] to dst
	andq   %r9,%r9       		# checks if %r9 <= 0
	jle    unroll         		# if so, jump to unroll
	iaddq  $1,%rax         		# count++


unroll:
	iaddq $48,%rdi         		# unroll src at [i+6]
	iaddq $48,%rsi         		# unroll dest at [i+6]
	iaddq $-6,%rdx         		# decrement len by 6
	jge   loop             		# if len >= 0, keep going

auxiliary:  
	iaddq $6, %rdx          	# resets len

aux1:
	iaddq  $-1, %rdx        	# len--
	jl     Done             	# unrolls the loop 6 indices later
	mrmovq (%rdi), %r8     		
	mrmovq 8(%rdi), %r9    		 
	rmmovq %r8, (%rsi)     		
	andq   %r8, %r8       		
	jle    aux2           		
	iaddq  $1, %rax         	# count++
	
aux2: 
	iaddq  $-1, %rdx        	# len-- 
	jl     Done             	#  
	rmmovq %r9, 8(%rsi)    		# Move src [i+1] to dst[i+1]
	andq   %r9, %r9       		# chec if src [i+1] <= 0
	jle    aux3           		# if so, jump to aux3
	iaddq  $1, %rax         	# count++ 

aux3: 
	iaddq  $-1, %rdx        	# len-- 
	jl     Done             	# 
	mrmovq 16(%rdi), %r8   		# Move src[i+2] to %r8 
	mrmovq 24(%rdi), %r9   		# Move src[i+3] to %r9
	rmmovq %r8, 16(%rsi)   		# Move src[i+2] to dst[i+2] 
	andq   %r8, %r8       		# Move src[i+2] <= 0? 
	jle    aux4           		# if so, jump to Extra3
	iaddq  $1, %rax         	# count++

aux4: 
	iaddq  $-1, %rdx        	# len--
	jl     Done	        		#  
	rmmovq %r9, 24(%rsi)   		# Move src[i+3] to dst[i+3]
	andq   %r9, %r9       		# Checks if src[i+3] <= 0
	jle    aux5           		# if so, jump to Extra4 
	iaddq  $1, %rax 

aux5: 
	iaddq  $-1, %rdx        	# len--
	jl     Done             	# 
	mrmovq 32(%rdi), %r8   		# Move src[i+4] to %r18
	rmmovq %r8, 32(%rsi)   		# Move src[i+4] to dst[i+4] 
	andq   %r8, %r8       		# checks if src[i+4] <= 0 
	jle    Done             	# if so, Done
	iaddq  $1, %rax         	# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
